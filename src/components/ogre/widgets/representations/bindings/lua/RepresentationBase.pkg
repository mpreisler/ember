// Author: Martin Preisler <preisler.m@gmail.com>, (C) 2011
// based on Atlas adapters by Erik Hjortsberg <erik.hjortsberg@gmail.com>, (C) 2007
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.//
//
$#include "../../RepresentationBase.h"

namespace Ember {
namespace OgreView {

namespace Gui {

namespace Representations {

class RepresentationBase
{
	TOLUA_TEMPLATE_BIND(ValueType, Atlas::Message::Element)

public:
	RepresentationBase();

	virtual ~RepresentationBase();
	
	/**
	 * @brief retrieves the GUI layout root
	 * 
	 * This is useful for adding the representation to your own GUI layouts
	 */
	virtual CEGUI::Window* getGuiRoot() = 0;
	
	/**
	 * @brief programatically sets the edited value
	 * 
	 * This can be used for "revert to default" for example
	 */
	virtual void setEditedValue(const ValueType& v) = 0;
	
	/**
	 * @brief retrieves the value user is editing
	 */
	virtual const ValueType& getEditedValue() const = 0;
	
	/**
	 * @brief retrieves a signal user can connect to, emitted when the value is edited
	 * 
	 * @see AdapterBase::EventValueChanged
	 */
	virtual sigc::signal<void>& getEventValueChangedSignal() = 0;
	
	/**
	 * @brief retrieves the original value (at the time of representation construction)
	 * 
	 * @copydoc AdapterBase::getOriginalValue
	 */
	virtual const ValueType& getOriginalValue() const = 0;
	
	/**
	 * @brief checks whether this representation has changes
	 * 
	 * @copydoc AdapterBase::hasChanges
	 */
	virtual bool hasChanges() const = 0;
	
	/**
	 * @brief checks whether this represents something that has been removed
	 * 
	 * @copydoc AdapterBase::isRemoved
	 */
	virtual bool isRemoved() const = 0;
	
	/**
	 * @brief adds a suggested value
	 * 
	 * @copydoc AdapterBase::addSuggestion
	 */
	virtual void addSuggestion(const std::string& suggestion) = 0;
};

$renaming ^RepresentationBase<Atlas::Message::Element> @ AtlasRepresentationBase

}

}

}

}
